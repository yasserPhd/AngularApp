import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map, catchError } from 'rxjs/operators';
import { of, throwError } from 'rxjs';
import { HttpResponse } from '@angular/common/http';

const httpOptions = {
  headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
  responseType: 'text' as 'json'
  //responseType: 'json'
};

export class User{
  constructor(
    public status:string,
     ) {}
  
}

@Injectable({
  providedIn: 'root'
})


export class LoginServService {
  private token: string="";
 

  constructor(private http:HttpClient) { }

  login(username:string,password:string){
    const headers = new HttpHeaders({ Authorization: 'Basic ' + btoa(username + ':' + password) });
     return this.http.get("http://localhost:8080/",{headers,responseType: 'text' as 'json'});

    //  return this.http.get("http://localhost:8080/",{headers,responseType: 'text' });
  }
  
  // logout()
  // {
  //   return this.http.get("http://localhost:8080/logout");
  // }

  authenticate(username:string, password:string) {
    console.log("userName"+username);
    const body = { username: username, password: password };
    return this.http.post<HttpResponse<any>>('http://localhost:8080/api/login', body,  {...httpOptions, observe: 'response'})
    .pipe( map((data :HttpResponse<any>) => {
        sessionStorage.setItem('username',username);
        console.log("data found are"+data);
        let token = data.headers.get("Authorization");
        console.log("token is"+token);
        //sessionStorage.setItem("token", token);
        this.token=token != null ? token : "";
        console.log(" logged successfully");
    }),
    catchError(error => {
      console.log(error);
      return throwError(error);
  })
);
}

 /*  map((userData : any) => {
    sessionStorage.setItem("username", username);
    console.log("session storage is"+sessionStorage.getItem("username"));
    let tokenStr = "Bearer " + userData.token;
    sessionStorage.setItem("token", tokenStr);
    return userData;
  }), */


  isUserLoggedIn() {
    let user = sessionStorage.getItem('username')
    console.log("use logged in = "+!(user === null))
    return !(user === null)
  }

  logOut() {
    console.log("attemp to logout");
    sessionStorage.removeItem('username')
    console.log("logged out");
  }
  getToken(){
   return this.token;
  }
}